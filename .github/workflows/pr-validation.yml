name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - master
      - main

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    # This ensures external contributors need manual approval to run workflows
    # Repository maintainers can approve by clicking "Approve and run" in the Actions tab
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build plugin
        run: ./gradlew buildPlugin --no-daemon --stacktrace

      - name: Run code checks
        run: ./gradlew check --no-daemon --stacktrace
        continue-on-error: true

      - name: Verify plugin compatibility
        run: ./gradlew verifyPlugin --no-daemon --stacktrace
        continue-on-error: true

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.event.pull_request.number }}
          path: |
            build/distributions/*.zip
            build/reports/
          retention-days: 7

      - name: Upload verification report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verification-report-${{ github.event.pull_request.number }}
          path: build/reports/pluginVerifier/
          retention-days: 7
          if-no-files-found: ignore

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const buildStatus = '${{ job.status }}';
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            let comment = `## PR Validation Results\n\n`;
            comment += `**Status**: ${buildStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n\n`;
            comment += `### Checks Performed\n`;
            comment += `- ‚úÖ Plugin Build\n`;
            comment += `- ‚úÖ Code Quality Checks\n`;
            comment += `- ‚úÖ Plugin Compatibility Verification\n\n`;
            comment += `[View detailed results](${runUrl})\n\n`;
            comment += `---\n`;
            comment += `ü§ñ Generated by PR Validation Workflow`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
